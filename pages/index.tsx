import { useEffect, useState } from 'react';
import type { NextPage } from 'next'
import Head from 'next/head'
import Feed from '../components/feed'
import mqtt, { IClientOptions } from "mqtt";
import { Authorized, Rejected } from '../components/auth-indicators';
import { StatusIndicator } from '../components/status';
import { Status } from '../components/types';
import styles from '../styles/pages/Home.module.scss'

const Home: NextPage = () => {
  const [authVisible, setAuthVisible] = useState(false);
  const [rejectVisible, setRejectVisible] = useState(false);
  const [authGesture, setAuthGesture] = useState(false);
  const [authDoor, setAuthDoor] = useState(false);
  const [client, setClient] = useState(null);
  const [serverStatus, setServerStatus] = useState<Status>("loading");

  const mqttConnect = () => {
    console.log('Connecting');
    return mqtt.connect("ws://broker.hivemq.com", {
      protocol: "ws",
      clientId: "abc123",
      username: "rrp003",
      port: 8000,
      path: "/mqtt"
    });
  };

  const clearAll = () => {
    setAuthVisible(false);
    setRejectVisible(false);
    setAuthDoor(false);
    setAuthGesture(false);
  }

  const handleMessage = (msg: string) => {
    switch(msg) {
      case "door_yes":
        setAuthDoor(true);
        break;
      case "gesture_yes":
        setAuthGesture(true);
        break;
      case "auth_yes":
        setAuthVisible(true);
        setTimeout(() => {
          clearAll();
        }, 3000);
        break;
      case "auth_no":
        setRejectVisible(true);
        setTimeout(() => {
          clearAll();
        }, 3000);
        break;
      default:
        console.error("Unknown message!");
    }
  }

  useEffect(() => {
    if (client) {
      console.log(client)
      client.subscribe("keylessed", { qos: 1 }, (error) => {
        if (error) {
          console.log('Subscribe to topics error', error)
          setServerStatus("error");
          return
        }
        setServerStatus("ok");
        console.log("Subscribed to topic!")
      });
      client.on('error', (err) => {
        console.error('Connection error: ', err);
        setServerStatus("error");
        client.end();
      });
      client.on('message', (topic, msg) => {
        console.log(`${topic}: ${msg.toString()}`);
        handleMessage(msg.toString());
      });
    }
  }, [client]);

  useEffect(() => {
    setServerStatus("loading");
    setClient(mqttConnect());
  }, [])

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <Feed>
          { authVisible ? <Authorized /> : null }
          { rejectVisible ? <Rejected /> : null }
        </Feed>
      </main>

      <footer className={styles.footer}>
        <div>
          <StatusIndicator variant={authGesture ? "ok" : "error"} label="Gesture" />
          <StatusIndicator variant={authDoor ? "ok" : "error"} label="Door" />
        </div>
        <div>
          <StatusIndicator variant={serverStatus} label="Server Status" />
        </div>
      </footer>
    </div>
  )
}

export default Home
